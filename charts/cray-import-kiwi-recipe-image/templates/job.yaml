{{/*
MIT License

(C) Copyright 2022 Hewlett Packard Enterprise Development LP

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.import_job.name }}
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: cray-product-catalog
      volumes:
      - emptyDir:
          medium: Memory
        name: catalog-overlay
    {{- if gt (len .Values.import_job.IMS_TEMPLATE_DICTIONARY) 0 }}
      - name: template-dictionary
        configMap:
          name: {{ .Values.import_job.name }}-configmap
          items:
          - key: template_dictionary
            path: template_dictionary
    {{- end }}
      containers:
      - name: update-catalog
        image: "{{ .Values.catalog.image.repository }}:{{ .Values.catalog.image.tag }}"
        imagePullPolicy: {{ .Values.catalog.image.pullPolicy }}
        volumeMounts:
        - mountPath: /results
          name: catalog-overlay
        env:
        - name: PRODUCT
          value: "{{ .Values.import_job.PRODUCT_NAME }}"
        - name: PRODUCT_VERSION
          value: "{{ .Values.import_job.PRODUCT_VERSION }}"
        - name: CONFIG_MAP
          value: "{{ .Values.catalog.config_map }}"
        - name: CONFIG_MAP_NAMESPACE
          value: "{{ .Values.catalog.config_map_namespace }}"
        - name: YAML_CONTENT
          value: /results/records.yaml
        command: ["/bin/ash"]
        args:
        - -c
        - "while [ ! -f ${YAML_CONTENT} ]; do sleep 2; echo 'Waiting for '${YAML_CONTENT}; done; /catalog_update.py"
        resources:
          limits:
            cpu: "2"
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: image-recipe-import
        volumeMounts:
        - mountPath: /results
          name: catalog-overlay
      {{- if gt (len .Values.import_job.IMS_TEMPLATE_DICTIONARY) 0 }}
        - name: template-dictionary
          mountPath: /mnt/image-recipe-import/
      {{- end }}
        env:
        - name: DOWNLOAD_PATH
          value: "{{ .Values.import_job.DOWNLOAD_PATH }}"
        - name: IMS_URL
          value: "{{ .Values.import_job.IMS_URL }}"
        - name: LOG_LEVEL
          value: "{{ .Values.import_job.LOG_LEVEL }}"
        - name: MANIFEST_FILE
          value: "{{ .Values.import_job.MANIFEST_FILE }}"
        - name: S3_IMS_BUCKET
          value: "{{ .Values.import_job.S3_IMS_BUCKET }}"
        - name: S3_BOOT_IMAGES_BUCKET
          value: "{{ .Values.import_job.S3_BOOT_IMAGES_BUCKET }}"
        - name: SSL_VALIDATE
          value: "{{ .Values.import_job.SSL_VALIDATE }}"
        - name: ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.import_job.S3_CREDENTIALS_SECRET }}"
              key: "{{ .Values.import_job.S3_CREDENTIALS_ACCESS_KEY }}"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.import_job.S3_CREDENTIALS_SECRET }}"
              key: "{{ .Values.import_job.S3_CREDENTIALS_SECRET_KEY }}"
        - name: S3_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.import_job.S3_CREDENTIALS_SECRET }}"
              key: "{{ .Values.import_job.S3_CREDENTIALS_S3_ENDPOINT_KEY }}"

        - name: BOS_URL
          value: "{{ .Values.import_job.BOS_URL }}"
        - name: BOS_SESSION_ENDPOINT
          value: "{{ .Values.import_job.BOS_SESSION_ENDPOINT }}"
        - name: BOS_KERNEL_PARAMETERS
          value: "{{ .Values.import_job.BOS_KERNEL_PARAMETERS }}"
        - name: BOS_ROOTFS_PROVIDER
          value: "{{ .Values.import_job.BOS_ROOTFS_PROVIDER }}"
        - name: BOS_ROOTFS_PROVIDER_PASSTHROUGH
          value: "{{ .Values.import_job.BOS_ROOTFS_PROVIDER_PASSTHROUGH }}"
        - name: BOS_CFS_CONFIGURATION
          value: "{{ .Values.import_job.BOS_CFS_CONFIGURATION }}"
        - name: BOS_ENABLE_CFS
          value: "{{ .Values.import_job.BOS_ENABLE_CFS }}"
        - name: CREATE_BOS_SESSION_TEMPLATE
          value: "{{ .Values.import_job.CREATE_BOS_SESSION_TEMPLATE }}"

        image: "{{ .Values.import_image.image.repository }}:{{ .Values.import_image.image.tag }}"
        imagePullPolicy: {{ .Values.import_image.image.pullPolicy }}
        resources:
          limits:
            cpu: "2"
            memory: 6Gi
          requests:
            cpu: 100m
            memory: 2Gi
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
